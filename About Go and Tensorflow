Example From: "https://www.tonytruong.net/running-a-keras-tensorflow-model-in-golang/"


# Python ===
./train/NoFinding
./train/Atelectasis

./test/NoFinding
./test/Atelectasis


toClassify="Atelectasis"  
train_rows=3600 # arbitrarily picked a smaller number which we'll read from the csv  
test_rows=400


# Prepare train and test sets

# Factorize the labels and make the directories, convert all | to _'s, remove spaces
labels, names = pd.factorize(df[1])  
image_names = image_dir + df.iloc[0:rows,0].values

# data mover function, also populates the dictionary so we can see the distribution of data
def copyImages(dataframe, idx, directory="train"):  
    classification = dataframe.iloc[idx][1].replace(" ","").replace("|","_")
    source = image_dir + dataframe.iloc[idx][0]
    destination = directory + "/"

    if classification == "NoFinding":
        shutil.copy(source, destination + "NoFinding")
    elif classification.find(toClassify) >= 0:
        shutil.copy(source, destination + toClassify)


# Make classification directories
pathlib.Path("train/" + "NoFinding").mkdir(parents=True, exist_ok=True)  
pathlib.Path("train/" + toClassify).mkdir(parents=True, exist_ok=True)  
pathlib.Path("test/" + "NoFinding").mkdir(parents=True, exist_ok=True)  
pathlib.Path("test/" + toClassify).mkdir(parents=True, exist_ok=True)


for r in range(train_rows):  
    copyImages(df, r, "train")

for r in range(test_rows):  
    copyImages(df, train_rows + r, "test")


sess = tf.Session()  
K.set_session(sess)  
model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_WIDTH, IMG_HEIGHT, CH), name="inputLayer"))  
model.add(Conv2D(32, (3, 3), activation='relu'))  
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())  
model.add(Dense(64, activation='relu'))  
model.add(Dropout(0.25))  
model.add(Dense(1, activation='sigmoid', name="inferenceLayer"))

sgd = optimizers.SGD(lr=0.01, momentum=0.0, decay=0.0, nesterov=False)  
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=["accuracy"])


[n.name for n in tf.get_default_graph().as_graph_def().node]


# Use TF to save the graph model instead of Keras save model to load it in Golang
builder = tf.saved_model.builder.SavedModelBuilder("myModel")  
# Tag the model, required for Go
builder.add_meta_graph_and_variables(sess, ["myTag"])  
builder.save()  
sess.close()





# GO ===

package main

import (  
    "fmt"

    tf "github.com/tensorflow/tensorflow/tensorflow/go"
)

func main() {  
    // replace myModel and myTag with the appropriate exported names in the chestrays-keras-binary-classification.ipynb
    model, err := tf.LoadSavedModel("myModel", []string{"myTag"}, nil)

    if err != nil {
        fmt.Printf("Error loading saved model: %s\n", err.Error())
        return
    }

    defer model.Session.Close()

    tensor, _ := tf.NewTensor([1][250][250][3]float32{})

    result, err := model.Session.Run(
        map[tf.Output]*tf.Tensor{
            model.Graph.Operation("inputLayer_input").Output(0): tensor, // Replace this with your input layer name
        },
        []tf.Output{
            model.Graph.Operation("inferenceLayer/Sigmoid").Output(0), // Replace this with your output layer name
        },
        nil,
    )

    if err != nil {
        fmt.Printf("Error running the session with input, err: %s\n", err.Error())
        return
    }

    fmt.Printf("Result value: %v \n", result[0].Value())

}

